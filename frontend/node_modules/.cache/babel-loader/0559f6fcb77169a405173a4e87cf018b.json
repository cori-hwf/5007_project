{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\cori_5007_project_v1\\\\5007_project\\\\frontend\\\\src\\\\WatchList.js\";\nimport React from \"react\";\nimport Movie_small from \"./Movie_small\";\nimport { graphQLFetch } from \"./helper/graphqlFetch.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass WatchList extends React.Component {\n  constructor() {\n    super(); //console.log(this.props.watch_list)\n  }\n\n  componentDidMount() {\n    this.fetchmovie();\n  }\n\n  async fetchMovie() {\n    const query = `query {\n            fetchmovie{\n            savedmovie{\n                _id\n                movieid\n                poster_path\n                title\n                vote_average\n            }\n            }\n            }`;\n    const data = await graphQLFetch(query, this.props.token);\n    console.log(\"check backend\");\n    console.log(data.fetchmovie.savedmovie); //the data wanted\n\n    this.setState({\n      user_watchlist: data.fetchmovie.savedmovie\n    });\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // {this.props.user_name}\n      // this.props.watch_list\n      //{this.state.movies.length > 0 && this.state.movies.map((movie) => <Movie_small key={movie.id} {...movie}/>)}\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          align: \"center\",\n          children: \"My watch list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-container\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"hi there\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    );\n  }\n\n}\n\nexport default WatchList;","map":{"version":3,"sources":["C:/Users/ASUS/OneDrive/cori_5007_project_v1/5007_project/frontend/src/WatchList.js"],"names":["React","Movie_small","graphQLFetch","WatchList","Component","constructor","componentDidMount","fetchmovie","fetchMovie","query","data","props","token","console","log","savedmovie","setState","user_watchlist","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,YAAR,QAA2B,0BAA3B;;;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAuC;AACnCC,EAAAA,WAAW,GAAG;AACV,YADU,CAEV;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,UAAL;AAEH;;AAEe,QAAVC,UAAU,GAAE;AACd,UAAMC,KAAK,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAVQ;AAWA,UAAMC,IAAI,GAAG,MAAMR,YAAY,CAACO,KAAD,EAAO,KAAKE,KAAL,CAAWC,KAAlB,CAA/B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACH,UAAL,CAAgBQ,UAA5B,EAdc,CAc0B;;AACxC,SAAKC,QAAL,CAAc;AAACC,MAAAA,cAAc,EAAEP,IAAI,CAACH,UAAL,CAAgBQ;AAAjC,KAAd;AACD;;AAEHG,EAAAA,MAAM,GAAG;AAEL;AAAA;AACI;AACA;AACA;AACA;AAAA,gCACI;AAAI,UAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAJJ;AAWH;;AA1CkC;;AA8CvC,eAAef,SAAf","sourcesContent":["import React from \"react\";\r\nimport Movie_small from \"./Movie_small\";\r\nimport {graphQLFetch} from \"./helper/graphqlFetch.js\";\r\n\r\nclass WatchList extends React.Component{\r\n    constructor() {\r\n        super();\r\n        //console.log(this.props.watch_list)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchmovie();\r\n\r\n    }\r\n\r\n    async fetchMovie(){\r\n        const query = `query {\r\n            fetchmovie{\r\n            savedmovie{\r\n                _id\r\n                movieid\r\n                poster_path\r\n                title\r\n                vote_average\r\n            }\r\n            }\r\n            }`;\r\n        const data = await graphQLFetch(query,this.props.token);\r\n        console.log(\"check backend\")\r\n        console.log(data.fetchmovie.savedmovie) //the data wanted\r\n        this.setState({user_watchlist: data.fetchmovie.savedmovie})\r\n      }\r\n\r\n    render() {\r\n      \r\n        return (\r\n            // {this.props.user_name}\r\n            // this.props.watch_list\r\n            //{this.state.movies.length > 0 && this.state.movies.map((movie) => <Movie_small key={movie.id} {...movie}/>)}\r\n            <>\r\n                <h1 align=\"center\">My watch list</h1>\r\n                <div className=\"movie-container\">\r\n                    <h1>hi there</h1>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default WatchList;\r\n"]},"metadata":{},"sourceType":"module"}